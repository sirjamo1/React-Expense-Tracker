{"version":3,"file":"static/js/896.ad4f9b7a.chunk.js","mappings":"0VAYO,SAASA,EAAT,GAAkC,IAAdC,EAAa,EAAbA,UACvB,OACI,SAAC,KAAD,CACIC,KAAMD,EACNE,QAAS,CACLC,YAAY,EACZC,QAAS,CACLC,QAAS,CACLC,UAAW,CACPC,MAAO,SAACC,GAEJ,OADAC,QAAQC,IAAIF,EAAQG,IAAIJ,OAClB,GAAN,OAAUC,EAAQG,IAAIJ,MAAtB,aAAgCC,EAAQG,IAAIC,EAC/C,OAO5B,CC3BM,SAASC,EAAT,GAAmC,IAAdb,EAAa,EAAbA,UACxB,OACI,SAAC,KAAD,CACIC,KAAMD,EACNE,QAAS,CACLC,YAAY,EACZW,UAAU,EACVC,QAAS,GACTX,QAAS,CACLC,QAAS,CACLC,UAAW,CACPC,MAAO,SAACC,GAEJ,OADAC,QAAQC,IAAIF,EAAQG,IAAIJ,OAClB,GAAN,OAAUC,EAAQG,IAAIJ,MAAtB,aAAgCC,EAAQG,IAAIC,EAC/C,OAO5B,CCLD,IA2lBA,EA3lBkB,WACd,IAAQI,GAASC,EAAAA,EAAAA,KAATD,KACR,GAA8CE,EAAAA,EAAAA,UAASF,EAAKG,aAA5D,eACMC,GADN,WACuBC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,gBAChCC,GAAcF,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,YACnC,GAAsCJ,EAAAA,EAAAA,UAAS,IAA/C,eAAOM,EAAP,KAAoBC,EAApB,KACMC,EAAUC,eAAeC,QAAQ,OACvC,GAA0CV,EAAAA,EAAAA,UAAS,IAAnD,eAAOW,EAAP,KAAsBC,EAAtB,KACA,GAAsCZ,EAAAA,EAAAA,UAAS,IAA/C,eAAOa,EAAP,KAAoBC,EAApB,KACA,GAAoDd,EAAAA,EAAAA,YAApD,eAAOe,EAAP,KAA2BC,EAA3B,KACA,GAAoDhB,EAAAA,EAAAA,YAApD,eAAOiB,EAAP,KAA2BC,EAA3B,KACA,GAAkDlB,EAAAA,EAAAA,YAAlD,eAAOmB,EAAP,KAA0BC,EAA1B,KACA,GAAkDpB,EAAAA,EAAAA,YAAlD,eAAOqB,EAAP,KAA0BC,EAA1B,KACA,GAAsDtB,EAAAA,EAAAA,YAAtD,eAAOuB,EAAP,KAA4BC,EAA5B,KACA,IAAoDxB,EAAAA,EAAAA,YAApD,iBAAOyB,GAAP,MAA2BC,GAA3B,MACA,IAAoD1B,EAAAA,EAAAA,YAApD,iBAAO2B,GAAP,MAA2BC,GAA3B,MACA,IAAsD5B,EAAAA,EAAAA,YAAtD,iBAAO6B,GAAP,MAA4BC,GAA5B,MACA,IAAkD9B,EAAAA,EAAAA,YAAlD,iBAAO+B,GAAP,MAA0BC,GAA1B,MACA,IAAkDhC,EAAAA,EAAAA,YAAlD,iBAAOiC,GAAP,MAA0BC,GAA1B,MACA,IAAgDlC,EAAAA,EAAAA,YAAhD,iBAAOmC,GAAP,MAAyBC,GAAzB,MACA,IAAgDpC,EAAAA,EAAAA,YAAhD,iBAAOqC,GAAP,MAAyBC,GAAzB,MACA,IAAkDtC,EAAAA,EAAAA,UAAS,SAA3D,iBAAOuC,GAAP,MAA0BC,GAA1B,MACA,IAAkCxC,EAAAA,EAAAA,UAAS,OAA3C,iBAAOyC,GAAP,MAAkBC,GAAlB,MACMC,IAASC,EAAAA,EAAAA,eAAc,CAAEC,MAAM,uBACrC,IAAkC7C,EAAAA,EAAAA,UAAS,CACvC8C,OAAQ,UACRC,SAAU,CACN,CACI1D,MAAO,UACPN,KAAM,QALlB,iBAAOD,GAAP,MAAkBkE,GAAlB,MASMC,GAAUN,GAeV,CACI,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OA1BJ,CACI,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAgBJO,GAAO,CACT,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEJ,GAAwB,MAApBpD,EAAKG,YAAqB,CAC1B,IAAMkD,GAAW,yCAAG,gHACGC,EAAAA,EAAAA,KACfP,EAAAA,EAAAA,IAAMxC,GAAagD,EAAAA,EAAAA,IAAM,MAAO,KAAM7C,KAF1B,OAUhB,IATMzB,EADU,OAIhBQ,QAAQC,IAAIT,GACNuE,EAAWvE,EAAKwE,KAAKC,KAAI,SAACC,GAAD,eAAC,UACzBA,EAAI1E,QADoB,IAE3B2E,GAAID,EAAIC,IAFmB,IAIzBC,EAAkB,GACfC,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IAC7BN,EAASM,GAAGE,MAAQtD,GACpBmD,EAAgBI,KAAKT,EAASM,GAAGI,WAGzCC,EAAAA,EAAAA,IAAcnE,EAAM,CAChBG,YAAa0D,EAAgB,KAhBjB,2CAAH,qDAmBjBR,IACH,EAEDe,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAc,yCAAG,0IACAf,EAAAA,EAAAA,KACfP,EAAAA,EAAAA,IACI3C,GACAmD,EAAAA,EAAAA,IAAM,MAAO,KAAM7C,IACnB4D,EAAAA,EAAAA,IAAQ,OAAQ,UALL,OA2BnB,IA1BMrF,EADa,OAQbuE,EAAWvE,EAAKwE,KAAKC,KAAI,SAACC,GAAD,eAAC,UACzBA,EAAI1E,QADoB,IAE3B2E,GAAID,EAAIC,IAFmB,IAIzBW,EAAyB,GACzBC,EAAgB,GAClBC,EAAsB,EACpBC,EAAe,GACjBC,EAAqB,EACnBC,EAAiB,GACnBC,EAAuB,EACrBC,EAAgB,GAClBC,EAAsB,EACpBC,EAAe,GACjBC,EAAqB,EACnBC,EAAc,GAChBC,EAAoB,EAElBC,EAAQ,GACLtB,EAAI,EAAGA,EAAIN,EAASO,OAAQD,IACjCS,EAAuBN,KAAKT,EAASM,IACrCsB,EAAMnB,KAAKT,EAASM,IAChBN,EAASM,GAAGuB,KAAKC,MAAM,EAAG,KAAOC,GAAQD,MAAM,EAAG,KACd,YAAhC9B,EAASM,GAAG0B,iBACZhB,EAAcP,KAAKT,EAASM,IAC5BW,GAAuBgB,SAASjC,EAASM,GAAG4B,UAE5ChB,EAAaT,KAAKT,EAASM,IAC3Ba,GAAsBc,SAASjC,EAASM,GAAG4B,UAG/ClC,EAASM,GAAGuB,KAAKC,MAAM,EAAG,KAAOC,GAAQD,MAAM,EAAG,KACd,YAAhC9B,EAASM,GAAG0B,iBACZZ,EAAeX,KAAKT,EAASM,IAC7Be,GAAwBY,SAASjC,EAASM,GAAG4B,UAE7CZ,EAAcb,KAAKT,EAASM,IAC5BiB,GAAuBU,SAASjC,EAASM,GAAG4B,UAGhDlC,EAASM,GAAGuB,KAAKC,MAAM,EAAG,MAAQC,KACE,YAAhC/B,EAASM,GAAG0B,iBACZR,EAAaf,KAAKT,EAASM,IAC3BmB,GAAsBQ,SAASjC,EAASM,GAAG4B,UAE3CR,EAAYjB,KAAKT,EAASM,IAC1BqB,GAAqBM,SAASjC,EAASM,GAAG4B,UAKtDjF,EAAe8D,EAAuBoB,WACtCzE,EAAsBsD,EAAcmB,WACpCvE,EAAsBqD,GACtBnD,EAAqBoD,EAAaiB,WAClCnE,EAAqBmD,GACrBjD,EAAuBkD,EAAee,WACtC3D,GAAuB6C,GACvBjD,GAAsBkD,EAAca,WACpC7D,GAAsBiD,GACtB7C,GAAqB8C,EAAaW,WAClCvD,GAAqB6C,GACrB3C,GAAoB4C,EAAYS,WAChCnD,GAAoB2C,GACpBnE,EAAeoE,GAxEI,4CAAH,qDA0EpBf,GACH,GAAE,IACH,IAAMkB,GAAUK,MAASC,OAAO,eAChCzB,EAAAA,EAAAA,YAAU,YACe,WACjB,IAAM0B,EAAgB,GACtBtF,EAAYkD,KAAI,SAACzE,GACTA,EAAK8G,WACLD,EAAc7B,KAAKhF,EAE1B,IACD6B,EAAiBgF,EACpB,CACDE,EACH,GAAE,CAACxF,IAEJ,IAAMyF,GAAY,SAACZ,GACf,IAAIa,EAAOT,SAASJ,EAAKc,UAAU,EAAG,IAClCC,EAAQX,SAASJ,EAAKc,UAAU,EAAG,IAAM,EACzCE,EAAMZ,SAASJ,EAAKc,UAAU,EAAG,KACrC,OAAIC,EAAQ,GACF,GAAN,OAAUF,EAAV,YAAkBE,EAAQ,GAAR,WAAiBA,GAAUA,EAA7C,YAAsDC,EAAM,GAAN,WAAeA,GAAQA,GAC5D,KAAVD,GACPA,EAAQ,EACF,GAAN,OAAUF,EAAO,EAAjB,YAAsBE,EAAQ,GAAR,WAAiBA,GAAUA,EAAjD,YACIC,EAAM,GAAN,WAAeA,GAAQA,SAHxB,CAMV,EACKN,GAAYlF,EAAc6C,KAAI,SAACzE,GAAD,OAChCA,EAAK8G,WACD,iBAEIO,UAC6B,WAAzBrH,EAAKuG,gBACC,2BACA,4BALd,WAQI,0BACI,uBAAIvG,EAAKsH,WAEb,0BACI,oCAAYN,GAAUhH,EAAKoG,YAE/B,0BACI,eAAGiB,UAAoC,WAAzBrH,EAAKuG,gBACb,SAAW,UADjB,cAC8BvG,EAAKyG,cAflCzG,EAAKuH,MAmBd,gBAAKF,UAAU,uBAAf,UACI,oDAvBwB,IA4B9BG,GAAkB1F,EAAYuE,MAAM,EAAG,GAAG5B,KAAI,SAACzE,GAAD,OAChD,iBACIqH,UAC6B,WAAzBrH,EAAKuG,gBACC,kCACA,mCAJd,WAOI,0BACI,uBAAIvG,EAAKsH,UAEX1D,IAEO,yBAFE,0BACP,uBAAI5D,EAAKyH,UAEb,yBAC8B,WAAzBzH,EAAKuG,iBACF,6BAAKvG,EAAKyG,WAEV,8BAAMzG,EAAKyG,aAGnB,0BACI,uBAAIzG,EAAKoG,KAAKc,UAAU,EAAG,UArBzBlH,EAAKuH,IADiC,IA2B9CG,GAAYpB,GAAQD,MAAM,EAAG,GAoB7BsB,GAnBkB,WAQpB,IAPA,IAAIC,EAAQ,IAAIC,KACZC,EAAM,IAAID,KACVD,EAAMG,cACNH,EAAMI,WAAa,EACnB,GACFC,UACEC,EAAS,GACJrD,EAAI,EAAGA,GAAKiD,EAAKjD,IACtBqD,EAAOlD,KACH4C,EAAMG,cACF,IACAL,GACA,KACC7C,EAAI,GAAK,IAAMA,EAAIA,IAGhC,OAAOqD,CACV,CACoBC,IAErBhD,EAAAA,EAAAA,YAAU,WACN,IAAMiD,EAAO,yCAAG,uGACRpG,IAAuB,CAAC,GAA2B,UAAtBwB,IACvB6E,EAAgB,GACtBnE,GAAOoE,SAAQ,SAACnB,GACZ,IAAIoB,EAAkB,CAClBpB,MAAOA,EACPV,OAAQ,EACRnG,MAAO6G,GAEXkB,EAAcrD,KAAKuD,EACtB,IACDvG,EAAmByC,KAAI,SAAC+D,GACpB,IAAIrB,EAAQX,SAASgC,EAAQpC,KAAKc,UAAU,EAAG,GAAI,IAAM,EACzDmB,EAAclB,GAAOV,QAAUD,SAASgC,EAAQ/B,OACnD,IACKgC,EAAoB,GAC1BJ,EAAcC,SAAQ,SAAUtG,GAC5B,IAAI0G,EAAe,CACfC,EAAG3G,EAAmBmF,MACtBxG,EAAGqB,EAAmByE,OACtBnG,MAAO0B,EAAmBmF,OAE9BsB,EAAkBzD,KAAK0D,EAC1B,IACKE,EAAe,GACrB1E,GAAOoE,SAAQ,SAACnB,GACZ,IAAIoB,EAAkB,CAClBpB,MAAOA,EACPV,OAAQ,EACRnG,MAAO6G,GAEXyB,EAAa5D,KAAKuD,EACrB,IACDnG,EAAkBqC,KAAI,SAACoE,GACnB,IAAI1B,EAAQX,SAASqC,EAAOzC,KAAKc,UAAU,EAAG,GAAI,IAAM,EACxD0B,EAAazB,GAAOV,QAAUD,SAASqC,EAAOpC,OACjD,IACKqC,EAAmB,GACzBF,EAAaN,SAAQ,SAAUlG,GAC3B,IAAI2G,EAAc,CACdJ,EAAGvG,EAAkB+E,MACrBxG,EAAGyB,EAAkBqE,OACrBnG,MAAO8B,EAAkB+E,OAE7B2B,EAAiB9D,KAAK+D,EACzB,IACD9E,GAAa,CACTF,OAAQG,GAAOO,KAAI,SAACzE,GAAD,OAAUA,CAAV,IACnBgE,SAAU,CACN,CACI1D,MAAO,kBACP0I,MAAM,EACNhJ,KAAMyI,EACNQ,YAAa,qBACbC,gBAAiB,uBACjBC,aAAc,GAElB,CACI7I,MAAO,gBACP0I,MAAM,EACNhJ,KAAM8I,EACNG,YAAa,qBACbC,gBAAiB,uBACjBC,aAAc,OAK1B3G,IAAwB,CAAC,GACH,YAAtBgB,IAEM4F,EAAsB,GAC5B5G,EAAoB8F,SAAQ,SAAU9F,GAClC,IAAIkG,EAAe,CACfC,EAAGnG,EAAoB4D,KAAKc,UAAU,EAAG,IACzCvG,EAAG6B,EAAoBiE,OACvBnG,MAAOkC,EAAoB8E,OAE/B8B,EAAoBpE,KAAK0D,EAC5B,IACKW,EAAqB,GAC3B3G,GAAmB4F,SAAQ,SAAU5F,GACjC,IAAIqG,EAAc,CACdJ,EAAGjG,EAAmB0D,KAAKc,UAAU,EAAG,IACxCvG,EAAG+B,EAAmB+D,OACtBnG,MAAOoC,EAAmB4E,OAE9B+B,EAAmBrE,KAAK+D,EAC3B,IACD9E,GAAa,CACTF,OAAQ4D,GAAalD,KAAI,SAACzE,GAAD,OAAUA,CAAV,IACzBgE,SAAU,CACN,CACI1D,MAAO4D,GAAOsC,SAASkB,IAAa,GACpC1H,KAAMoJ,EACNJ,MAAM,EACNC,YAAa,qBACbC,gBAAiB,uBACjBC,aAAc,GAElB,CACI7I,MAAO4D,GAAOsC,SAASkB,IAAa,GACpC1H,KAAMqJ,EACNL,MAAM,EACNC,YAAa,qBACbC,gBAAiB,uBACjBC,aAAc,OAK1BnG,KAAsB,CAAC,GACD,UAAtBQ,KAEM8F,EAAoB,GAC1BtG,GAAkBsF,SAAQ,SAAUtF,GAChC,IAAIuG,EAAQ,CACRZ,EAAG3F,EAAkBoD,KAAKc,UAAU,GAAI,IACxCvG,EAAGqC,EAAkByD,OACrBnG,MAAO0C,EAAkBsE,OAE7BgC,EAAkBtE,KAAKuE,EAC1B,IACKC,EAAmB,GACzBpG,GAAiBkF,SAAQ,SAAUlF,GAC/B,IAAImG,EAAQ,CACRZ,EAAGvF,EAAiBgD,KAAKc,UAAU,GAAI,IACvCvG,EAAGyC,EAAiBqD,OACpBnG,MAAO8C,EAAiBkE,OAE5BkC,EAAiBxE,KAAKuE,EACzB,IACDtF,GAAa,CACTF,OAAQI,GAAKM,KAAI,SAACzE,GAAD,OAAUA,CAAV,IAEjBgE,SAAU,CACN,CACI1D,MAAO,iBACPN,KAAMsJ,EACNN,MAAM,EACNC,YAAa,qBACbC,gBAAiB,uBACjBC,aAAc,EACdM,QAAQ,GAEZ,CACInJ,MAAO,eACPN,KAAMwJ,EACNR,MAAM,EACNC,YAAa,qBACbC,gBAAiB,uBACjBC,aAAc,EACdM,QAAQ,OAxJZ,2CAAH,qDA8JbrB,GACH,GAAE,CAAC7G,EAAaiC,KACjB,IAOMkG,IACF,iBAAKrC,UAAU,eAAf,WACI,iBACIsC,MAAM,QACNtC,UAC0B,UAAtB7D,GACM,yBACA,KAEVoG,QAAS,WACLnG,GAAqB,QACxB,EATL,WAWI,oCACA,wCAEI,iBAAM4D,UAAU,WAAhB,SAA4B/E,QAEhC,2CAEI,iBAAM+E,UAAU,WAAhB,SAA4BnF,QAEhC,uCAEI,iBACImF,UACI/E,EAAoBJ,GAAsB,EACpC,WACA,WAJd,SAOKI,EAAoBJ,WAIjC,iBACImF,UAC0B,YAAtB7D,GACM,yBACA,KAEVoG,QAAS,WACLnG,GAAqB,UACxB,EARL,WAUI,qCACA,wCAEI,iBAAM4D,UAAU,WAAhB,SAA4BzE,SAEhC,2CAEI,iBAAMyE,UAAU,WAAhB,SAA4BvE,SAEhC,uCAEI,iBACIuE,UACIzE,GAAqBE,IAAuB,EACtC,WACA,WAJd,SAOKF,GAAqBE,YAIlC,iBACIuE,UAC0B,UAAtB7D,GACM,yBACA,KAEVoG,QAAS,WACLnG,GAAqB,QACxB,EARL,WAUI,mCACA,wCAEI,iBAAM4D,UAAU,WAAhB,SAA4B/D,SAEhC,2CAEI,iBAAM+D,UAAU,WAAhB,SAA4BnE,SAEhC,uCAEI,iBACImE,UACI/D,GAAmBJ,IAAqB,EAClC,WACA,WAJd,SAOKI,GAAmBJ,cAMxC,OACI,iBAAKmE,UAAU,sBAAf,WACI,SAACwC,EAAA,EAAD,CAAQC,YAAa,eAErB,iBAAKzC,UAAU,2BAAf,WACI,iBAAKA,UAAU,qBAAf,UACKqC,IAED,gBAAKrC,UAAU,kBAAf,SACmB,QAAd3D,IACG,SAAC9C,EAAD,CAAWb,UAAWA,MAEtB,SAACD,EAAD,CAAUC,UAAWA,QAG7B,iBAAKsH,UAAU,4BAAf,WACI,iDACA,gBAAIuC,QA7HA,WAEhBjG,GADc,QAAdD,GACa,OAEA,MAEpB,EAuHmB,uBACeA,GADf,aAGA,6BACI,SAAC,KAAD,CAAMqG,GAAG,gBAAT,4BAIR,iBAAK1C,UAAU,6BAAf,WACI,yCACEzD,IAAuB,yBAAd,iCACX,mCACA,mCAEH4D,OAEL,iBAAKH,UAAU,sBAAf,WACI,oDACA,gBAAKA,UAAU,2BAAf,SAA2CP,aAK9D,C","sources":["components/charts/BarChart.js","components/charts/LineChart.js","components/dashboard/Dashboard.js"],"sourcesContent":["import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport {\n    chart as chartjs,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from \"chart.js/auto\";\n\nexport function BarChart({ chartData }) {\n    return (\n        <Bar\n            data={chartData}\n            options={{\n                responsive: true,\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: (context) => {\n                                console.log(context.raw.label);\n                                return `${context.raw.label} $${context.raw.y}`;\n                            },\n                        },\n                    },\n                },\n            }}\n        />\n    );\n}\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { chart as chartjs } from \"chart.js/auto\";\n\nexport function LineChart({ chartData }) {\n    return (\n        <Line\n            data={chartData}\n            options={{\n                responsive: true,\n                spanGaps: true,\n                tension: 0.4,\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: (context) => {\n                                console.log(context.raw.label);\n                                return `${context.raw.label} $${context.raw.y}`;\n                            },\n                        },\n                    },\n                },\n            }}\n        />\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./Dashboard.css\";\nimport { db } from \"../../firebase-config\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { updateProfile } from \"firebase/auth\";\nimport Header from \"../header/Header\";\nimport { useMediaQuery } from \"react-responsive\";\nimport {\n    collection,\n    getDocs,\n    query,\n    orderBy,\n    limit,\n    where,\n} from \"firebase/firestore\";\nimport { useAuth } from \"../../Auth\";\nimport { BarChart } from \"../charts/BarChart\";\nimport { LineChart } from \"../charts/LineChart\";\n\nconst Dashboard = () => {\n    const { user } = useAuth();\n    const [userDisplayName, setUserDisplayName] = useState(user.displayName);\n    const expenseDataRef = collection(db, \"expenseData\");\n    const userDataRef = collection(db, \"userData\");\n    const [expenseData, setExpenseData] = useState([]);\n    const userUid = sessionStorage.getItem(\"uid\");\n    const [recurringData, setRecurringData] = useState([]);\n    const [threeRecent, setThreeRecent] = useState([]);\n    const [yearlyExpenseChart, setYearlyExpenseChart] = useState();\n    const [yearlyExpenseTotal, setYearlyExpenseTotal] = useState();\n    const [yearlyIncomeChart, setYearlyIncomeChart] = useState();\n    const [yearlyIncomeTotal, setYearlyIncomeTotal] = useState();\n    const [monthlyExpenseChart, setMonthlyExpenseChart] = useState();\n    const [monthlyIncomeChart, setMonthlyIncomeChart] = useState();\n    const [monthlyIncomeTotal, setMonthlyIncomeTotal] = useState();\n    const [monthlyExpenseTotal, setMonthlyExpenseTotal] = useState();\n    const [dailyExpenseChart, setDailyExpenseChart] = useState();\n    const [dailyExpenseTotal, setDailyExpenseTotal] = useState();\n    const [dailyIncomeChart, setDailyIncomeChart] = useState();\n    const [dailyIncomeTotal, setDailyIncomeTotal] = useState();\n    const [dailyMonthlyTotal, setDailyMonthlyTotal] = useState(\"total\");\n    const [lineOrBar, setLineOrBar] = useState(\"Bar\");\n    const mobile = useMediaQuery({ query: `(max-width: 400px)` });\n    const [chartData, setChartData] = useState({\n        labels: \"No Data\",\n        datasets: [\n            {\n                label: \"No Data\",\n                data: \"0\",\n            },\n        ],\n    });\n    const months = !mobile\n        ? [\n              \"January\",\n              \"February\",\n              \"March\",\n              \"April\",\n              \"May\",\n              \"June\",\n              \"July\",\n              \"August\",\n              \"September\",\n              \"October\",\n              \"November\",\n              \"December\",\n          ]\n        : [\n              \"Jan\",\n              \"Feb\",\n              \"Mar\",\n              \"Apr\",\n              \"May\",\n              \"Jun\",\n              \"Jul\",\n              \"Aug\",\n              \"Sep\",\n              \"Oct\",\n              \"Nov\",\n              \"Dec\",\n          ];\n    const time = [\n        \"01\",\n        \"02\",\n        \"03\",\n        \"04\",\n        \"05\",\n        \"06\",\n        \"07\",\n        \"08\",\n        \"09\",\n        \"10\",\n        \"11\",\n        \"12\",\n        \"13\",\n        \"14\",\n        \"15\",\n        \"16\",\n        \"17\",\n        \"18\",\n        \"19\",\n        \"20\",\n        \"21\",\n        \"22\",\n        \"23\",\n        \"24\",\n    ];\n    if (user.displayName == null) {\n        const getUserData = async () => {\n            const data = await getDocs(\n                query(userDataRef, where(\"uid\", \"==\", userUid))\n            );\n            console.log(data);\n            const userData = data.docs.map((doc) => ({\n                ...doc.data(),\n                id: doc.id,\n            }));\n            const currentUserData = [];\n            for (let i = 0; i < userData.length; i++) {\n                if (userData[i].uid === userUid) {\n                    currentUserData.push(userData[i].fullName);\n                }\n            }\n            updateProfile(user, {\n                displayName: currentUserData[0],\n            });\n        };\n        getUserData();\n    }\n\n    useEffect(() => {\n        const getExpenseData = async () => {\n            const data = await getDocs(\n                query(\n                    expenseDataRef,\n                    where(\"uid\", \"==\", userUid),\n                    orderBy(\"date\", \"desc\")\n                )\n            );\n            const userData = data.docs.map((doc) => ({\n                ...doc.data(),\n                id: doc.id,\n            }));\n            const currentUserExpenseData = [];\n            const yearlyExpense = [];\n            let yearlyExpenseAmount = 0;\n            const yearlyIncome = [];\n            let yearlyIncomeAmount = 0;\n            const monthlyExpense = [];\n            let monthlyExpenseAmount = 0;\n            const monthlyIncome = [];\n            let monthlyIncomeAmount = 0;\n            const dailyExpense = [];\n            let dailyExpenseAmount = 0;\n            const dailyIncome = [];\n            let dailyIncomeAmount = 0;\n\n            const three = [];\n            for (let i = 0; i < userData.length; i++) {\n                currentUserExpenseData.push(userData[i]);\n                three.push(userData[i]);\n                if (userData[i].date.slice(0, 4) === theDate.slice(0, 4)) {\n                    if (userData[i].incomeOrExpense === \"expense\") {\n                        yearlyExpense.push(userData[i]);\n                        yearlyExpenseAmount += parseInt(userData[i].amount);\n                    } else {\n                        yearlyIncome.push(userData[i]);\n                        yearlyIncomeAmount += parseInt(userData[i].amount);\n                    }\n                }\n                if (userData[i].date.slice(0, 7) === theDate.slice(0, 7)) {\n                    if (userData[i].incomeOrExpense === \"expense\") {\n                        monthlyExpense.push(userData[i]);\n                        monthlyExpenseAmount += parseInt(userData[i].amount);\n                    } else {\n                        monthlyIncome.push(userData[i]);\n                        monthlyIncomeAmount += parseInt(userData[i].amount);\n                    }\n                }\n                if (userData[i].date.slice(0, 10) === theDate) {\n                    if (userData[i].incomeOrExpense === \"expense\") {\n                        dailyExpense.push(userData[i]);\n                        dailyExpenseAmount += parseInt(userData[i].amount);\n                    } else {\n                        dailyIncome.push(userData[i]);\n                        dailyIncomeAmount += parseInt(userData[i].amount);\n                    }\n                }\n            }\n\n            setExpenseData(currentUserExpenseData.reverse());\n            setYearlyExpenseChart(yearlyExpense.reverse());\n            setYearlyExpenseTotal(yearlyExpenseAmount);\n            setYearlyIncomeChart(yearlyIncome.reverse());\n            setYearlyIncomeTotal(yearlyIncomeAmount);\n            setMonthlyExpenseChart(monthlyExpense.reverse());\n            setMonthlyExpenseTotal(monthlyExpenseAmount);\n            setMonthlyIncomeChart(monthlyIncome.reverse());\n            setMonthlyIncomeTotal(monthlyIncomeAmount);\n            setDailyExpenseChart(dailyExpense.reverse());\n            setDailyExpenseTotal(dailyExpenseAmount);\n            setDailyIncomeChart(dailyIncome.reverse());\n            setDailyIncomeTotal(dailyIncomeAmount);\n            setThreeRecent(three);\n        };\n        getExpenseData();\n    }, []);\n    const theDate = moment().format(\"YYYY-MM-DD\");\n    useEffect(() => {\n        const getRecurring = () => {\n            const recurringList = [];\n            expenseData.map((data) => {\n                if (data.recurring) {\n                    recurringList.push(data);\n                }\n            });\n            setRecurringData(recurringList);\n        };\n        getRecurring();\n    }, [expenseData]);\n    //NOTE: need to format properley and add one month to dates\n    const nextRecur = (date) => {\n        let year = parseInt(date.substring(2, 4))\n        let month = parseInt(date.substring(5, 7)) + 1;\n        let day = parseInt(date.substring(8, 10))\n        if (month < 12) {\n            return `${year}-${month < 10 ? `0${month}` : month}-${day < 10 ? `0${day}` : day}`\n        } else if (month === 13){\n            month = 1     \n            return `${year + 1}-${month < 10 ? `0${month}` : month}-${\n                day < 10 ? `0${day}` : day\n            }`;\n        }\n    }\n    const recurring = recurringData.map((data) =>\n        data.recurring ? (\n            <div\n                key={data.key}\n                className={\n                    data.incomeOrExpense === \"income\"\n                        ? \"recurring-div rec-income\"\n                        : \"recurring-div rec-expense\"\n                }\n            >\n                <div>\n                    <p>{data.title}</p>\n                </div>\n                <div>\n                    <p>Recurs: {nextRecur(data.date)}</p>\n                </div>\n                <div>\n                    <p className={data.incomeOrExpense === \"income\"\n                        ? \"income\" : \"expense\"}>${data.amount}</p>\n                </div>\n            </div>\n        ) : (\n            <div className=\"recurring-div-income\">\n                <p>No recurring data found</p>\n            </div>\n        )\n    );\n\n    const threeMostRecent = threeRecent.slice(0, 3).map((data) => (\n        <div key={data.key}\n            className={\n                data.incomeOrExpense === \"income\"\n                    ? \"recent-transactions-data income\"\n                    : \"recent-transactions-data expense\"\n            }\n        >\n            <div>\n                <p>{data.title}</p>\n            </div>\n            {!mobile ? <div>\n                <p>{data.type}</p>\n            </div> : <></>}\n            <div>\n                {data.incomeOrExpense === \"income\" ? (\n                    <p>${data.amount}</p>\n                ) : (\n                    <p>-${data.amount}</p>\n                )}\n            </div>\n            <div>\n                <p>{data.date.substring(0, 10)}</p>\n            </div>\n        </div>\n    ));\n\n    const thisMonth = theDate.slice(5, 7);\n    const getCurrentMonth = () => {\n        let today = new Date();\n        let end = new Date(\n            today.getFullYear(),\n            today.getMonth() + 1,\n            0\n        ).getDate();\n        let result = [];\n        for (let i = 1; i <= end; i++) {\n            result.push(\n                today.getFullYear() +\n                    \"-\" +\n                    thisMonth +\n                    \"-\" +\n                    (i < 10 ? \"0\" + i : i)\n            );\n        }\n        return result;\n    };\n    const currentMonth = getCurrentMonth();\n\n    useEffect(() => {\n        const getData = async () => {\n            if (yearlyExpenseChart !== {} && dailyMonthlyTotal === \"total\") {\n                const monthsExpense = [];\n                months.forEach((month) => {\n                    let monthPlusAmount = {\n                        month: month,\n                        amount: 0,\n                        label: month,\n                    };\n                    monthsExpense.push(monthPlusAmount);\n                });\n                yearlyExpenseChart.map((expense) => {\n                    let month = parseInt(expense.date.substring(5, 7), 10) - 1;\n                    monthsExpense[month].amount += parseInt(expense.amount);\n                });\n                const totalExpenseFinal = [];\n                monthsExpense.forEach(function (yearlyExpenseChart) {\n                    let chartExpense = {\n                        x: yearlyExpenseChart.month,\n                        y: yearlyExpenseChart.amount,\n                        label: yearlyExpenseChart.month,\n                    };\n                    totalExpenseFinal.push(chartExpense);\n                });\n                const monthsIncome = [];\n                months.forEach((month) => {\n                    let monthPlusAmount = {\n                        month: month,\n                        amount: 0,\n                        label: month,\n                    };\n                    monthsIncome.push(monthPlusAmount);\n                });\n                yearlyIncomeChart.map((income) => {\n                    let month = parseInt(income.date.substring(5, 7), 10) - 1;\n                    monthsIncome[month].amount += parseInt(income.amount);\n                });\n                const totalIncomeFinal = [];\n                monthsIncome.forEach(function (yearlyIncomeChart) {\n                    let chartIncome = {\n                        x: yearlyIncomeChart.month,\n                        y: yearlyIncomeChart.amount,\n                        label: yearlyIncomeChart.month,\n                    };\n                    totalIncomeFinal.push(chartIncome);\n                });\n                setChartData({\n                    labels: months.map((data) => data),\n                    datasets: [\n                        {\n                            label: \"Yearly Expenses\",\n                            fill: true,\n                            data: totalExpenseFinal,\n                            borderColor: \"rgba(255, 6, 6, 1)\",\n                            backgroundColor: \"rgba(255, 6, 6, 0.3)\",\n                            borderRadius: 2,\n                        },\n                        {\n                            label: \"Yearly Income\",\n                            fill: true,\n                            data: totalIncomeFinal,\n                            borderColor: \"rgba(6, 236, 6, 1)\",\n                            backgroundColor: \"rgba(6, 236, 6, 0.2)\",\n                            borderRadius: 2,\n                        },\n                    ],\n                });\n            } else if (\n                monthlyExpenseChart !== {} &&\n                dailyMonthlyTotal === \"monthly\"\n            ) {\n                const monthlyExpenseFinal = [];\n                monthlyExpenseChart.forEach(function (monthlyExpenseChart) {\n                    let chartExpense = {\n                        x: monthlyExpenseChart.date.substring(0, 10),\n                        y: monthlyExpenseChart.amount,\n                        label: monthlyExpenseChart.title,\n                    };\n                    monthlyExpenseFinal.push(chartExpense);\n                });\n                const monthlyIncomeFinal = [];\n                monthlyIncomeChart.forEach(function (monthlyIncomeChart) {\n                    let chartIncome = {\n                        x: monthlyIncomeChart.date.substring(0, 10),\n                        y: monthlyIncomeChart.amount,\n                        label: monthlyIncomeChart.title,\n                    };\n                    monthlyIncomeFinal.push(chartIncome);\n                });\n                setChartData({\n                    labels: currentMonth.map((data) => data),\n                    datasets: [\n                        {\n                            label: months[parseInt(thisMonth) - 1],\n                            data: monthlyExpenseFinal,\n                            fill: true,\n                            borderColor: \"rgba(255, 6, 6, 1)\",\n                            backgroundColor: \"rgba(255, 6, 6, 0.3)\",\n                            borderRadius: 2,\n                        },\n                        {\n                            label: months[parseInt(thisMonth) - 1],\n                            data: monthlyIncomeFinal,\n                            fill: true,\n                            borderColor: \"rgba(6, 236, 6, 1)\",\n                            backgroundColor: \"rgba(6, 236, 6, 0.3)\",\n                            borderRadius: 2,\n                        },\n                    ],\n                });\n            } else if (\n                dailyExpenseChart !== {} &&\n                dailyMonthlyTotal === \"daily\"\n            ) {\n                const dailyExpenseFinal = [];\n                dailyExpenseChart.forEach(function (dailyExpenseChart) {\n                    let chart = {\n                        x: dailyExpenseChart.date.substring(11, 13),\n                        y: dailyExpenseChart.amount,\n                        label: dailyExpenseChart.title,\n                    };\n                    dailyExpenseFinal.push(chart);\n                });\n                const dailyIncomeFinal = [];\n                dailyIncomeChart.forEach(function (dailyIncomeChart) {\n                    let chart = {\n                        x: dailyIncomeChart.date.substring(11, 13),\n                        y: dailyIncomeChart.amount,\n                        label: dailyIncomeChart.title,\n                    };\n                    dailyIncomeFinal.push(chart);\n                });\n                setChartData({\n                    labels: time.map((data) => data),\n\n                    datasets: [\n                        {\n                            label: \"Daily Expenses\",\n                            data: dailyExpenseFinal,\n                            fill: true,\n                            borderColor: \"rgba(255, 6, 6, 1)\",\n                            backgroundColor: \"rgba(255, 6, 6, 0.3)\",\n                            borderRadius: 2,\n                            active: true,\n                        },\n                        {\n                            label: \"Daily Income\",\n                            data: dailyIncomeFinal,\n                            fill: true,\n                            borderColor: \"rgba(6, 236, 6, 1)\",\n                            backgroundColor: \"rgba(6, 236, 6, 0.3)\",\n                            borderRadius: 2,\n                            active: true,\n                        },\n                    ],\n                });\n            }\n        };\n        getData();\n    }, [expenseData, dailyMonthlyTotal]);\n    const changeLineOrBar = () => {\n        if (lineOrBar === \"Bar\") {\n            setLineOrBar(\"Line\");\n        } else {\n            setLineOrBar(\"Bar\");\n        }\n    };\n    const threeTotals = (\n        <div className=\"three-totals\">\n            <div\n                value=\"total\"\n                className={\n                    dailyMonthlyTotal === \"total\"\n                        ? \"three-totals-activated\"\n                        : null\n                }\n                onClick={() => {\n                    setDailyMonthlyTotal(\"total\");\n                }}\n            >\n                <h5>Yearly</h5>\n                <h6>\n                    Income : $\n                    <span className=\"positive\">{yearlyIncomeTotal}</span>\n                </h6>\n                <h6>\n                    Expenses : $-\n                    <span className=\"negative\">{yearlyExpenseTotal}</span>\n                </h6>\n                <h6>\n                    Total : $\n                    <span\n                        className={\n                            yearlyIncomeTotal - yearlyExpenseTotal >= 0\n                                ? \"positive\"\n                                : \"negative\"\n                        }\n                    >\n                        {yearlyIncomeTotal - yearlyExpenseTotal}\n                    </span>\n                </h6>\n            </div>\n            <div\n                className={\n                    dailyMonthlyTotal === \"monthly\"\n                        ? \"three-totals-activated\"\n                        : null\n                }\n                onClick={() => {\n                    setDailyMonthlyTotal(\"monthly\");\n                }}\n            >\n                <h5>Monthly</h5>\n                <h6>\n                    Income : $\n                    <span className=\"positive\">{monthlyIncomeTotal}</span>\n                </h6>\n                <h6>\n                    Expenses : $-\n                    <span className=\"negative\">{monthlyExpenseTotal}</span>\n                </h6>\n                <h6>\n                    Total : $\n                    <span\n                        className={\n                            monthlyIncomeTotal - monthlyExpenseTotal >= 0\n                                ? \"positive\"\n                                : \"negative\"\n                        }\n                    >\n                        {monthlyIncomeTotal - monthlyExpenseTotal}\n                    </span>\n                </h6>\n            </div>\n            <div\n                className={\n                    dailyMonthlyTotal === \"daily\"\n                        ? \"three-totals-activated\"\n                        : null\n                }\n                onClick={() => {\n                    setDailyMonthlyTotal(\"daily\");\n                }}\n            >\n                <h5>Daily</h5>\n                <h6>\n                    Income : $\n                    <span className=\"positive\">{dailyIncomeTotal}</span>\n                </h6>\n                <h6>\n                    Expenses : $-\n                    <span className=\"negative\">{dailyExpenseTotal}</span>\n                </h6>\n                <h6>\n                    Total : $\n                    <span\n                        className={\n                            dailyIncomeTotal - dailyExpenseTotal >= 0\n                                ? \"positive\"\n                                : \"negative\"\n                        }\n                    >\n                        {dailyIncomeTotal - dailyExpenseTotal}\n                    </span>\n                </h6>\n            </div>\n        </div>\n    );\n    return (\n        <div className=\"dashboard-container\">\n            <Header headerTitle={\"Dashboard\"} />\n\n            <div className=\"left-and-right-container\">\n                <div className=\"leftside-container\">\n                    {threeTotals}\n\n                    <div className=\"chart-container\">\n                        {lineOrBar === \"Bar\" ? (\n                            <LineChart chartData={chartData} />\n                        ) : (\n                            <BarChart chartData={chartData} />\n                        )}\n                    </div>\n                    <div className=\"recent-transactions-title\">\n                        <h4>Recent Transactions</h4>\n                        <h5 onClick={changeLineOrBar}>\n                            Change to {lineOrBar} Chart\n                        </h5>\n                        <button>\n                            <Link to=\"/transactions\">View All</Link>\n                        </button>\n                    </div>\n\n                    <div className=\"recent-transactions-header\">\n                        <p>NAME/BUSINESS</p>\n                        {!mobile ? <p>TYPE</p> : <></>}\n                        <p>AMOUNT</p>\n                        <p>DATE</p>\n                    </div>\n                    {threeMostRecent}\n                </div>\n                <div className=\"rightside-container\">\n                    <h4>Recurring Transactions</h4>\n                    <div className=\"recurring-data-container\">{recurring}</div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"names":["BarChart","chartData","data","options","responsive","plugins","tooltip","callbacks","label","context","console","log","raw","y","LineChart","spanGaps","tension","user","useAuth","useState","displayName","expenseDataRef","collection","db","userDataRef","expenseData","setExpenseData","userUid","sessionStorage","getItem","recurringData","setRecurringData","threeRecent","setThreeRecent","yearlyExpenseChart","setYearlyExpenseChart","yearlyExpenseTotal","setYearlyExpenseTotal","yearlyIncomeChart","setYearlyIncomeChart","yearlyIncomeTotal","setYearlyIncomeTotal","monthlyExpenseChart","setMonthlyExpenseChart","monthlyIncomeChart","setMonthlyIncomeChart","monthlyIncomeTotal","setMonthlyIncomeTotal","monthlyExpenseTotal","setMonthlyExpenseTotal","dailyExpenseChart","setDailyExpenseChart","dailyExpenseTotal","setDailyExpenseTotal","dailyIncomeChart","setDailyIncomeChart","dailyIncomeTotal","setDailyIncomeTotal","dailyMonthlyTotal","setDailyMonthlyTotal","lineOrBar","setLineOrBar","mobile","useMediaQuery","query","labels","datasets","setChartData","months","time","getUserData","getDocs","where","userData","docs","map","doc","id","currentUserData","i","length","uid","push","fullName","updateProfile","useEffect","getExpenseData","orderBy","currentUserExpenseData","yearlyExpense","yearlyExpenseAmount","yearlyIncome","yearlyIncomeAmount","monthlyExpense","monthlyExpenseAmount","monthlyIncome","monthlyIncomeAmount","dailyExpense","dailyExpenseAmount","dailyIncome","dailyIncomeAmount","three","date","slice","theDate","incomeOrExpense","parseInt","amount","reverse","moment","format","recurringList","recurring","getRecurring","nextRecur","year","substring","month","day","className","title","key","threeMostRecent","type","thisMonth","currentMonth","today","Date","end","getFullYear","getMonth","getDate","result","getCurrentMonth","getData","monthsExpense","forEach","monthPlusAmount","expense","totalExpenseFinal","chartExpense","x","monthsIncome","income","totalIncomeFinal","chartIncome","fill","borderColor","backgroundColor","borderRadius","monthlyExpenseFinal","monthlyIncomeFinal","dailyExpenseFinal","chart","dailyIncomeFinal","active","threeTotals","value","onClick","Header","headerTitle","to"],"sourceRoot":""}